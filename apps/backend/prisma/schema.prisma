generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Model {
  id             String                  @id @default(uuid())
  name           String
  type           ModelTypeEnum
  age            Int
  userId         String
  ethinicity     EthinicityEnum
  eyeColor       EyeColorEnum
  bald           Boolean
  outputImages   OutputImages[]
  triggerWord    String?
  tensorPath     String?
  trainingStatus ModelTrainingStatusEnum @default(Pending)
  falAiRequestId String?
  zipURL         String
}

model OutputImages {
  id             String                @id @default(uuid())
  imageUrl       String                @default("")
  modelId        String
  userId         String
  prompt         String
  status         OutputImageStatusEnum @default(Pending)
  model          Model                 @relation(fields: [modelId], references: [id])
  falAiRequestId String?
}

model Packs {
  id   String @id @default(uuid())
  name String
}

model PackPrompts {
  id     String @id @default(uuid())
  prompt String
  packId String
}

enum EthinicityEnum {
  White            @map("White")
  Black            @map("Black")
  Asian_American   @map("Asian American")
  East_Asian       @map("East Asian")
  South_East_Asian @map("South East Asian")
  South_Asian      @map("South Asian")
  Middle_Eastern   @map("Middle Eastern")
  Pacific          @map("Pacific")
  Hispanic         @map("Hispanic")
}

enum EyeColorEnum {
  Brown
  Blue
  Hazel
  Gray
}

enum ModelTypeEnum {
  Man
  Woman
  Others
}

enum OutputImageStatusEnum {
  Pending
  Generated
  Failed
}

enum ModelTrainingStatusEnum {
  Pending
  Generated
  Failed
}
